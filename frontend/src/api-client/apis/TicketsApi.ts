/* tslint:disable */
/* eslint-disable */
/**
 * TicketTracking.Api | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddTicketResponseDto,
  PagedCollectionOfTicketListItemDto,
  ProblemDetails,
  TicketDto,
  TicketRequestDto,
} from '../models/index';
import {
    AddTicketResponseDtoFromJSON,
    AddTicketResponseDtoToJSON,
    PagedCollectionOfTicketListItemDtoFromJSON,
    PagedCollectionOfTicketListItemDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TicketDtoFromJSON,
    TicketDtoToJSON,
    TicketRequestDtoFromJSON,
    TicketRequestDtoToJSON,
} from '../models/index';

export interface ApiTicketsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiTicketsIdGetRequest {
    id: number;
}

export interface ApiTicketsIdPutRequest {
    id: number;
    ticketRequestDto: TicketRequestDto;
}

export interface ApiTicketsPostRequest {
    ticketRequestDto: TicketRequestDto;
}

/**
 * 
 */
export class TicketsApi extends runtime.BaseAPI {

    /**
     */
    async apiTicketsGetRaw(requestParameters: ApiTicketsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedCollectionOfTicketListItemDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Tickets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedCollectionOfTicketListItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiTicketsGet(requestParameters: ApiTicketsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedCollectionOfTicketListItemDto> {
        const response = await this.apiTicketsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTicketsIdGetRaw(requestParameters: ApiTicketsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTicketsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Tickets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiTicketsIdGet(requestParameters: ApiTicketsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketDto> {
        const response = await this.apiTicketsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTicketsIdPutRaw(requestParameters: ApiTicketsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTicketsIdPut().'
            );
        }

        if (requestParameters['ticketRequestDto'] == null) {
            throw new runtime.RequiredError(
                'ticketRequestDto',
                'Required parameter "ticketRequestDto" was null or undefined when calling apiTicketsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Tickets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TicketRequestDtoToJSON(requestParameters['ticketRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTicketsIdPut(requestParameters: ApiTicketsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTicketsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTicketsPostRaw(requestParameters: ApiTicketsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddTicketResponseDto>> {
        if (requestParameters['ticketRequestDto'] == null) {
            throw new runtime.RequiredError(
                'ticketRequestDto',
                'Required parameter "ticketRequestDto" was null or undefined when calling apiTicketsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Tickets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketRequestDtoToJSON(requestParameters['ticketRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddTicketResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiTicketsPost(requestParameters: ApiTicketsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddTicketResponseDto> {
        const response = await this.apiTicketsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
