/* tslint:disable */
/* eslint-disable */
/**
 * TicketTracking.Api | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  TicketReplyDto,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TicketReplyDtoFromJSON,
    TicketReplyDtoToJSON,
} from '../models/index';

export interface ApiRepliesPostRequest {
    ticketReplyDto: TicketReplyDto;
}

export interface ApiRepliesTicketTicketIdGetRequest {
    ticketId: number;
}

/**
 * 
 */
export class RepliesApi extends runtime.BaseAPI {

    /**
     */
    async apiRepliesPostRaw(requestParameters: ApiRepliesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['ticketReplyDto'] == null) {
            throw new runtime.RequiredError(
                'ticketReplyDto',
                'Required parameter "ticketReplyDto" was null or undefined when calling apiRepliesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Replies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketReplyDtoToJSON(requestParameters['ticketReplyDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiRepliesPost(requestParameters: ApiRepliesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.apiRepliesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRepliesTicketTicketIdGetRaw(requestParameters: ApiRepliesTicketTicketIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TicketReplyDto>>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling apiRepliesTicketTicketIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Replies/ticket/{ticketId}`.replace(`{${"ticketId"}}`, encodeURIComponent(String(requestParameters['ticketId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TicketReplyDtoFromJSON));
    }

    /**
     */
    async apiRepliesTicketTicketIdGet(requestParameters: ApiRepliesTicketTicketIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TicketReplyDto>> {
        const response = await this.apiRepliesTicketTicketIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
